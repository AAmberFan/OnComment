{"version":3,"file":"auction_server.js","sourceRoot":"","sources":["../server/auction_server.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport {Server} from \"ws\";\n\nconst app = express();\n\nexport class Product{\n    constructor(\n        public id:number,\n        public name: string,\n        public price:number,\n        public rating:number,\n        public desc:string,\n        public categories: Array<string>\n    ){\n    }\n}\n\nexport class Comment{\n    constructor(\n        public id: number,\n        public productId: number,\n        public  timestamp: string,\n        public name: string,\n        public rating: number,\n        public comment: string\n    ){}\n}\nconst products: Product[] = [\n    new Product(1,\"water\",3.0,3.8,\"water\",[\"geocery\"]),\n    new Product(2,\"milk\",4.99,4.5,\"2% milk\",[\"geocery\",\"dairy product\"]),\n    new Product(3,\"cookie\",2.55,2.5,\"cookie\",[\"geocery\"]),\n    new Product(4,\"chip\",4.5,4.3,\"BBQ Chip\",[\"geocery\"]),\n    new Product(5,\"earphone\",25.99,3.6,\"earphone\",[\"device\",\"computer \"]),\n    new Product(6,\"ipad\",320.99,4.7,\"latest version\",[\"device\",\"computer \",\"Apple\"]),\n];\nconst comments: Comment[] = [\n    new Comment(1,1,\"2018-01-01 11:11:11\",\"Amber\",4,\"very good\"),\n    new Comment(2,1,\"2018-01-01 11:11:11\",\"Bob\",4,\"very good\"),\n    new Comment(3,3,\"2018-01-01 11:11:11\",\"Cindy\",4,\"very good\"),\n    new Comment(4,4,\"2018-01-01 11:11:11\",\"Divid\",4,\"very good\"),\n];\napp.get('/api/',(req, res)=>{\n    res.send(\"Hello express\");\n});\napp.get('/api/products',(req,res)=>{\n    let result = products;\n    let params = req.query;\n    console.log(req.url);\n    // if(params.name){\n    //     result = result.filter((p)=> p.name.indexOf(params.name)!== -1);\n    // }\n    // if(params.price && result.length > 0){\n    //     result = result.filter(p=> p.price <= parseInt(params.price));\n    // }\n    // if(params.category!==\"-1\" && result.length > 0){\n    //     result = result.filter(p=> p.categories.indexOf(params.category)!==-1);\n    // }\n    res.json(result);\n});\napp.get('/api/product/:id',(req,res)=>{\n    res.json(products.find(product=> product.id == req.params.id));\n});\napp.get('/api/product/:id/comments',(req,res)=>{\n    res.json(comments.filter((comment:Comment) => comment.productId == req.params.id));\n});\nconst server = app.listen(8000,\"localhost\",()=>{\n    console.log(\"服务器已启动，地址：http://localhost:8000\");\n});\nconst subscription = new Map<any,number[]>();\n\nconst wsServer = new Server({port:8085});\nwsServer.on(\"connection\",websocket=>{\n    websocket.send(\"this message from server\");\n    websocket.on(\"message\", message =>{\n        let messageObj = JSON.parse( message );\n        let productIds = subscription.get(websocket)||[]\n        subscription.set(websocket,[...productIds, messageObj.productid])\n    })\n});\nconst currentBids = new Map<number, number>();\nsetInterval(()=>{\n    products.forEach( p =>{\n        let currentBid = currentBids.get(p.id)|| p.price;\n        let newBid = currentBid + Math.random()*5;\n        currentBids.set(p.id, newBid);\n    });\n    subscription.forEach((productIds:number[], ws)=>{\n        if(ws.readyState ===1){\n            let newBids = productIds.map(pid => ({\n                productId: pid,\n                bid: currentBids.get(pid)\n            }));\n            ws.send(JSON.stringify(newBids));\n        }else{\n            subscription.delete(ws);\n        }\n\n    });\n},3000);\n\n"]}